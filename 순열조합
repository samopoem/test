#include <iostream>
using namespace std;

int t[10];
int a[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
int cnt;
int R;

void print()
{
	int i = 0;
	printf("[%2d] ", ++cnt);
	while (i != R) printf("%d", t[i++]);
	printf("\n");
}

void swap(int * x, int * y)
{
	int t = *x; *x = *y; *y = t;
}

void Comb(int n, int r)
{
	if (r == 0) print();
	else if (n < r) return;
	else
	{
		t[r - 1] = a[n - 1];
		Comb(n - 1, r - 1);
		Comb(n - 1, r);
	}
}

void H(int n, int r)
{
	if (r == 0) print();
	else if (n == 0) return;
	else
	{
		t[r - 1] = a[n - 1];
		H(n, r - 1);
		H(n - 1, r);
	}
}

//int Comb(int n, int r) // 갯수만 구할때
//{
// if(r == 0) return 1;
// else if (n < r) return 0;
// else 
// {
//  return Comb(n-1, r-1) + Comb(n-1, r);
// }
//}


void PI(int n, int r)
{
	if (r == 0) print();
	else
	{
		for (int i = n - 1; i >= 0; i--)
		{
			swap(&a[i], &a[n - 1]);
			t[r - 1] = a[n - 1];
			PI(n, r - 1);
			swap(&a[i], &a[n - 1]);
		}
	}
}

void Perm(int n, int r)
{
	if (r == 0) print();
	else
	{
		for (int i = n - 1; i >= 0; i--)
		{
			swap(&a[i], &a[n - 1]);
			t[r - 1] = a[n - 1];
			Perm(n - 1, r - 1);
			swap(&a[i], &a[n - 1]);
		}
	}
}
void main(void)
{
	int n;

	cnt = 0;
	n = 4, R = 3;
	Perm(n, R);

	cnt = 0;
	n = 2, R = 3;
	H(n, R);
}


#include <stdio.h>
int n;
int arr[3] = { 1, 2, 3 };

void swap(int *x, int *y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

void perm(int n, int k){
	int i;
	if (k == n) { // 종료 조건
		for (int i = 0; i < n; i++)
			printf("%d ", arr[i]);
		printf("\n");
	}
	else
		for (i = k; i < n; i++){
			swap(&arr[k], &arr[i]);
			perm(n, k + 1);
			swap(&arr[k], &arr[i]);
		}
}

int  main(){
	perm(3, 0);
	return 0;
}
